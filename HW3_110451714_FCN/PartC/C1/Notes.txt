a) All the four source files are present in folder: \HW3_110451714_FCN\PartC\C1
	
		Source files:
		Advertisement.java  ClientSocketConn.java  DistanceVector.java  ServerSocketConn.java  topology.txt
		
		Program flow-> Every host will execute below command to start the host/router's algorthm
			
			command: java <filename> serverport client1-host port client2-host port 
		
		Program execution needs to be setup from left to right nodes, H1-->H2
		First it open the given server port and then connect as a client to mentioned required servers,
		<client1-host port client2-host port>.
		The reason for these number of arguments is that in our network a host can have at max two incoming
		connections (servers) or two outgoing connections (clients).
		As for the very first execution, all the required incoming/outgoing connections would be established
		as clients/servers. These sockets would be maintain to advertise the routing informations.
		
		Program is a daemon process which will be executed after every 20 seconds and follow below
		procedures:
			#Check if there is any network info on the socket from any of the client updates
			#if yes, read the node route info and then compare with the map loaded from own file info
			#if there is any update, map will incorporate the changes and update it to the file of that host
			#Once after updaing own file, it will write the data to the socket connections to its neighbours
			#Run the Bellman Ford algorithm with the updated route file copy
			#Repeat the same process periodically, 20 seconds in my scenario.
			
		Here, All the route level advertisment are done using socket connection among neighbours and
		generate the routing table of the host/router gradually till it converges.
		
		
	b)
	Time take to find shortest path= 26 seconds
	
	Time calculation Methodolgy:
	long startTime = System.currentTimeMillis();
	
	****** Bellman Ford Algorithm*******
	
	long stopTime = System.currentTimeMillis();
    long elapsedTime = stopTime - startTime;
    System.out.println(elapsedTime);
	
	c)
	Vertex H1 distance to other nodes
		H1 0 H1
		H2 10 R1
		R1 2 R1
		R2 12 R1
		R3 8 R1
		R4 8 R1
	
	
	Vertex H2 distance from other nodes
		H1 -1 null
		H2 0 H2
		R1 -1 null
		R2 -1 null
		R3 -1 null
		R4 -1 null
	
	
	Vertex R1 distance from other nodes
		H1 -1 null
		H2 8 R2
		R1 0 R1
		R2 10 R2
		R3 6 R3
		R4 6 R2
	
	Vertex R2 distance from other nodes
		H1 -1 null
		H2 -2 null
		R1 -1 null
		R2 0 R2
		R3 -1 null
		R4 -4 null

	Vertex R3 distance from other nodes
		H1 -1 null
		H2 7 R4
		R1 -1 null
		R2 -1 null
		R3 0 R3
		R4 5 R4
		

	Vertex R4 distance from other nodes
		H1 -1 null
		H2 2 H2
		R1 -1 null
		R2 -1 null
		R3 -1 null
		R4 0 R4
		
	
	Note: I am displaying -1 as node unreachable